/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_java_projects.html
 */

plugins {
  // Apply the application plugin to add support for building a CLI application in Java.
  id 'application'
  id 'com.google.cloud.tools.jib' version '3.3.1'
}

version = project.property('application.version')
ext.swimVersion = project.property('swim.version')
ext.nstreamVersion = project.property('nstream.version')

repositories {
  mavenCentral()
  maven { url 'https://packages.confluent.io/maven' }
}

dependencies {
  implementation group: 'org.swimos', name: 'swim-server', version: swimVersion
  implementation group: 'org.swimos', name: 'swim-meta', version: swimVersion

  implementation group: 'io.nstream', name: 'nstream-adapter-avro', version: nstreamVersion
  implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '7.5.1'

  implementation group: 'io.nstream', name: 'nstream-adapter-confluent', version: nstreamVersion
  implementation group: 'io.nstream', name: 'nstream-adapter-geo', version: nstreamVersion

  implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.11'
  implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.11'
  testImplementation 'org.testng:testng:7.4.0'
}

application {
  // Define the main class for the application.
  mainClass = 'nstream.cflt.bike.Main'
}

tasks.named('test') {
  // Use TestNG for unit tests.
  useTestNG()
}

jib {
  from {
    image = "openjdk:11"
  }
  to {
    image = "nstream/demo-cflt-bike-rental:${version}"
    auth {
      username = "$System.env.REGISTRY_USERNAME"
      password = "$System.env.REGISTRY_PASSWORD"
    }
  }
  container {
    mainClass = mainClassName
    ports = ['9001/tcp']
    jvmFlags = ['-Dswim.config=/config/server.recon']
  }
  extraDirectories {
    paths {
      path {
        // copies a single-file.xml
        from = 'src/main/resources'
        into = '/config'
        includes = ['*.recon']
      }
    }
  }
}

def compileUi = tasks.register("compileUi") {
  exec {
    executable './buildUi.sh'
  }
}

run.dependsOn compileUi
